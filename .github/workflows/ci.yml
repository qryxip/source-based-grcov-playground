name: CI

on:
  push:
  pull_request:

jobs:
  grcov:
    name: grcov
    runs-on: ubuntu-20.04
    if: ${{ github.repository_owner == 'qryxip' && github.ref == 'refs/heads/master' }}
    env:
      NIGHTLY_TOOLCHAIN: nightly

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up `stable`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Set up `${{ env.NIGHTLY_TOOLCHAIN }}`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          profile: minimal
          components: llvm-tools-preview

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - run: gcov -v

      - name: Resolve `grcov ^0.8`
        id: resolve-versions
        run: |
          python - grcov@^0.8 rustfilt@^0.2 <<'EOF'
          from argparse import ArgumentParser
          import json
          import urllib.request
          import re

          CRATE_SPEC = re.compile(r'\A([a-zA-Z0-9_]+)@\^([0-9]+)\.([0-9]+)\Z')


          def main() -> None:
              parser = ArgumentParser()
              parser.add_argument('specs', metavar='PSEUDO_SPECS', type=CrateSpec, nargs='+')
              args = parser.parse_args()
              print('\n'.join(map(resolve, args.specs)))


          class CrateSpec:
              def __init__(self, s: str):
                  if not (m := CRATE_SPEC.match(s)):
                      raise RuntimeError(f'the version must be `{CRATE_SPEC.pattern}`')
                  self.package_name = m.group(1)
                  self.version_req_major = int(m.group(2))
                  self.version_req_minor = int(m.group(3))


          def resolve(spec: CrateSpec) -> str:
              with urllib.request.urlopen(f'https://crates.io/api/v1/crates/{spec.package_name}') as res:
                  versions = json.load(res)['versions']
              matched = set()
              for version in versions:
                  major, minor, patch_pre_build = version['num'].split('.')
                  major, minor = (int(major), int(minor))
                  if ((major, spec.version_req_major) == (0, 0) and minor == spec.version_req_minor or major == spec.version_req_major and minor >= spec.version_req_minor) and patch_pre_build.isdecimal():
                      matched.add((minor, int(patch_pre_build)))
              if not matched:
                  raise RuntimeError(f'No such package: `{spec.package_name} ^{spec.version_req_major}.{spec.version_req_minor}`')
              minor, patch = max(matched)
              return f'::set-output name={spec.package_name}::{spec.version_req_major}.{minor}.{patch}'


          if __name__ == '__main__':
              main()
          EOF

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/grcov
            ~/.cargo/bin/rustfilt
          key: grcov-${{ steps.resolve-versions.outputs.grcov }}

      - name: Install grcov v${{ steps.resolve-versions.outputs.grcov }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: grcov --version '=${{ steps.resolve-versions.outputs.grcov }}'
          toolchain: stable

      - name: Install rustfilt v${{ steps.resolve-versions.outputs.rustfilt }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: rustfilt --version '=${{ steps.resolve-versions.outputs.rustfilt }}'
          toolchain: stable

      - name: cargo-run
        uses: actions-rs/cargo@v1
        with:
          command: run
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
        env:
          RUSTFLAGS: '-Zinstrument-coverage'

      #- name: cargo-test
      #  uses: actions-rs/cargo@v1
      #  with:
      #    command: test
      #    args: --no-fail-fast -v -- --test-threads 1
      #    toolchain: nightly
      #  env:
      #    RUSTFLAGS: '-Zinstrument-coverage'
      #    RUST_BACKTRACE: full
      #    LLVM_PROFILE_NAME: '%p-%m.profraw'
      - name: cargo-test
        run: cargo +${{ env.NIGHTLY_TOOLCHAIN }} test --no-fail-fast -v -- --test-threads 1
        env:
          RUSTFLAGS: '-Zinstrument-coverage'
          RUST_BACKTRACE: full
          LLVM_PROFILE_NAME: '%p-%m.profraw'

      - run: ls -la
      - run: ls -la /tmp

      - name: grcov
        run: rustup run "$NIGHTLY_TOOLCHAIN" grcov . -b ./target/debug -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info

      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: lcov.info
